API Documentation-Here the firstly we provide the request type(get,post,put,delete), and base URL and api endpoint for perform the specific action and payload for put(update) and post(create) and description that explain about work of all api urls.

we make the documentation for "nudge".

----------------------------------->

Request Type  Base URL             API Endpoint               Payload                             Description  


GET            /api/v3         /nudge?id=:nudge_id            -                     Retrieves a specific nudge by its unique ID.

GET            /api/v3         /nudges?user_id=:id            -                     Fetches all nudges created by a specific user.

POST           /api/v3         /nudges                  Object Data Model           Creates a new nudge based on the provided payload.

PUT            /api/v3         /nudge/:id               Object Data Model           Updates an existing nudge by its unique ID.

DELETE         /api/v3        /nudge/:id                     -                    Deletes a specific nudge by its unique ID.

Now we define the request object model(what user give) and response object model(what user get)

Request Object Model------------------->

nudge : {
"event": "string", The name of event associated with the nudge
"tag" : "string", Tags an article or event
"title": "string", Title for the nudge (max 60 characters)
"image_url": "string", URL of the image for the nudge cover(using multer or storage)
"schedule": {
"date": "dd/mm/yyyy", Scheduled date
"time": {
"from": "hh:mm", hours : minutes ,starting time
"to": "hh:mm" hours : minutes ,ending time
}
},
"description": "string", Description of the nudge
"invitation": "string", One-line invitation (e.g., "Check this event!")
"icon_url": "string" URL of the icon for the nudge
}

Responce object Model------------->
Note --> responce can be get by url : GET /nudge?id=:nudge_id

nudge : {
{
"id": "string", Unique identifier for the nudge
"event": "string", Event name or type
"tag": "string", Associated tag
"title": "string", Title of the nudge
"image_url": "string", Cover image URL
"schedule": {
"date": "dd/mm/yyyy", Scheduled date
"time": {
"from": "hh:mm", hours : minutes ,starting time
"to": "hh:mm" hours : minutes ,ending time
}
},
"description": "string", Description of the nudge
"invitation": "string", One-line invitation
"icon_url": "string", Icon URL
"created_at": "timestamp", Timestamp of creation
"updated_at": "timestamp" Timestamp of last update
}

}

Overall Flow----------------->
Fetching a Nudge:

Use GET /nudge?id=:nudge_id to get details about a single nudge.
Use GET /nudges?user_id=:id to retrieve all nudges created by a specific user.
Creating a Nudge:

Use POST /nudges with a properly formatted payload. The server stores the data and returns the created nudge's details.
Updating a Nudge:

Use PUT /nudge/:id with the updated data. Only the specified fields are updated; others remain unchanged.
Deleting a Nudge:

Use DELETE /nudge/:id to remove a specific nudge permanently.

Use Case------------------------------>

this api uses as :
1>Create nudges for events like webinars or meetups.
2>Retrieve their nudges to view details.
3>Update their nudges if plans change.
4>Delete outdated or irrelevant nudges.
5>The structured request and response models ensure consistency and make it easier for developers to integrate this API into their applications.

Explanation of "Nudge" API Working
The "Nudge" API facilitates the management of "nudges" by providing endpoints for various operations like retrieving, creating, updating, and deleting nudges. Here's a breakdown of how it works:

API Endpoints and Their Purpose(CURD operations)----------------->

1. GET /nudge?id=:nudge_id(READ OPEARTION)
   Purpose: Retrieves a specific nudge by its unique ID.
   Input: The nudge_id is passed as a query parameter in the URL.
   Response: Returns a JSON object containing all details about the requested nudge, such as its title, event, description, schedule, and associated metadata like creation and update timestamps.

2. GET /nudges?user_id=:id(READ)
   Purpose: Fetches all nudges created by a specific user.
   Input: The user_id is passed as a query parameter in the URL.
   Response: Returns a list of nudge objects created by the user, each containing information like the event name, schedule, and other properties.

3. POST /nudges(CREATE)
   Purpose: Creates a new nudge.
   Input: The request payload (body) should include all the required details for a nudge, such as:
   Event name
   Tag
   Title
   Image URL (uploaded using a storage service like Multer)
   Schedule (with date and start/end times)
   Description
   Invitation
   Icon URL
   Response: Returns the newly created nudge object, including its unique ID and metadata like the creation timestamp.

4. PUT /nudge/:id(UPDATE)
   Purpose: Updates an existing nudge by its unique ID.
   Input:
   The id of the nudge to be updated is passed as a path parameter.
   The request payload (body) should include updated fields like title, schedule, or description. If certain fields are omitted, they remain unchanged.
   Response: Returns the updated nudge object, reflecting the changes and an updated timestamp.

5. DELETE /nudge/:id(DELETE)
   Purpose: Deletes a specific nudge by its unique ID.
   Input: The id of the nudge is passed as a path parameter.
   Response: Typically, a success message or status code (e.g., 200 OK) is returned to indicate that the nudge has been deleted.
